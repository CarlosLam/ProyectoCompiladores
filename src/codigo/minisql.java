/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author lam_m
 */
public class minisql extends javax.swing.JFrame {

    /**
     * Creates new form minisql
     */
    public minisql() {
        initComponents();
        this.setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLoadFlex = new javax.swing.JButton();
        btnCargarSQL = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtRespuesta = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnLoadFlex.setText("Cargar Jflex");
        btnLoadFlex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadFlexActionPerformed(evt);
            }
        });

        btnCargarSQL.setText("Cargar SQL");
        btnCargarSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarSQLActionPerformed(evt);
            }
        });

        txtRespuesta.setColumns(20);
        txtRespuesta.setRows(5);
        jScrollPane1.setViewportView(txtRespuesta);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLoadFlex)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 666, Short.MAX_VALUE)
                        .addComponent(btnCargarSQL)
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadFlex)
                    .addComponent(btnCargarSQL))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadFlexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadFlexActionPerformed
        // TODO add your handling code here:
        JFileChooser dialogo = new JFileChooser();
        FileNameExtensionFilter filtro=new FileNameExtensionFilter("Archivo Flex","flex");
        dialogo.setFileFilter(filtro);
        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            File archivo = dialogo.getSelectedFile();
            JFlex.Main.generate(archivo);
        }
    }//GEN-LAST:event_btnLoadFlexActionPerformed

    private String Preanalisis = "";
    private String TipoToken = "";
    private String[] Palabras;
    private int Contador = 0;
    private int errores = 0;
    private String TokenError = "";
    public String[] arreglo = new String[2];
    public Dictionary TS = new Hashtable();
    
    private void btnCargarSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarSQLActionPerformed
        // TODO add your handling code here:
        
        File archivo;
        JFileChooser dialogo = new JFileChooser();
        String rutaArchivo = "";
        FileNameExtensionFilter filtro=new FileNameExtensionFilter("Archivo SQL","sql");
        dialogo.setFileFilter(filtro);
        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            //Obtener la direccion del documento
            archivo = dialogo.getSelectedFile();
            rutaArchivo = archivo.getPath();
            String result = "";
            try {
                //Comenzar con la lectura del documento
                Reader lector = new BufferedReader(new FileReader(archivo));
                Lexer lexer = new Lexer(lector);
                while (true) {
                    Tokens tokens = lexer.yylex();
                    if (tokens == null) {
                        break;
                    }
                    
                    switch (tokens) {
                        case ERROR:
                            result += "ERROR JMP ERROR\n";
                            break;
                        case IdentificadorOver:
                            result += lexer.lexeme.substring(0, 31) + " JMP IDENTIFICADOR\n";
                            break;
                        default:
                            result += lexer.lexeme + " JMP " + tokens.toString().toUpperCase() + "\n";
                            break;
                    }
                }
                //File archivoOut = new File
            } catch (FileNotFoundException ex) {
                Logger.getLogger(minisql.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(minisql.class.getName()).log(Level.SEVERE, null, ex);
            }

            String[] sentencias = result.split("; JMP CARACTERES\\n");                  //Separacion de las 8 sentencias posibles mediante ';'
            for (String sentencia : sentencias) {
                Contador = 0;
                //Recorremos las sentencias
                Palabras = sentencia.split("\\n"); //Separamos tokens o palabras reservadas
                String[] aux = Palabras[0].split(" JMP ");
                Preanalisis = aux[0];
                TipoToken = aux[1];
                
                if ("GO".equals(Preanalisis)) {
                    Coincidir("GO");
                }
                try{                
                    switch(Preanalisis){
                        case "SELECT"://Cuando nos encontremos con un token de SELECT al inicio de una sentencia
                            Coincidir("SELECT");
                            S1();                               //ALL|DISTINCT
                            S2();                               //TOP
                            S3();                               //The columns to be selected for the result set
                            if (Contador < Palabras.length) {   //Puede que se de el caso de que el select solo tenga expresiones
                                Coincidir("FROM");
                                F1();                           //METODO FROM

                                if (Contador < Palabras.length) {
                                    switch(Preanalisis){
                                        case "INNER":
                                            CoincidirTipo("RESERVADAS");            //INNER
                                            J1();                                   //RESTO DEL JOIN
                                            break;
                                        case "LEFT":case "RIGHT":case "FULL":
                                            CoincidirTipo("RESERVADAS");            //LEFT|RIGHT|FULL

                                            if ("OUTER".equals(Preanalisis)){       //OUTER
                                               Coincidir("OUTER");                              
                                            }
                                            J1();                                   //Resto del JOIN
                                            break;
                                        case "JOIN":
                                            J1();
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }
                            if (Contador < Palabras.length) {
                                if("WHERE".equals(Preanalisis)){
                                    Coincidir("WHERE");                     //WHERE
                                    W();                                    //METODO
                                }
                            }
                            if (Contador < Palabras.length) {
                                if("GROUP".equals(Preanalisis)){
                                    Coincidir("GROUP");                     //Group
                                    Coincidir("BY");                        //Group
                                    G();                                    //METODO
                                }
                            }
                            if (Contador < Palabras.length) {
                                if("HAVING".equals(Preanalisis)){
                                    Coincidir("HAVING");                     //HAVING
                                    H();                                    //METODO
                                }
                            }
                            if (Contador < Palabras.length) {
                                if("ORDER".equals(Preanalisis)){
                                    Coincidir("ORDER");                     //ORDER
                                    Coincidir("BY");                        //BY
                                    O();                                    //METODO
                                }
                            }
                            if ((Contador < Palabras.length)) 
                                Reportar(Preanalisis);                      //No debe haber sentencias luego de las enlistadas anteriormente
                            break;
                        case "INSERT":
                            Coincidir("INSERT");
                            S2();                                               //TOP PERCENT
                            Coincidir("INTO");
                            INSERT1();                                          //Tabla donde se insertaran los datos
                            if ("(".equals(Preanalisis)) {                      //Cuando la persona primer elige el orden de las columnas
                                Coincidir("(");
                                INSERT2();                                      //Todas las posibles columnas
                                Coincidir(")");
                            }
                            if ("OUTPUT".equals(Preanalisis)) {
                                 Output();
                            }
                            Coincidir("VALUES");
                            Coincidir("(");
                            Expresiones();                                               //HOUSTON PROBLEMAS
                            while(",".equals(Preanalisis)){
                                Coincidir(",");
                                Expresiones();
                            }
                            Coincidir(")");
                            break;
                        case "UPDATE":
                            Coincidir("UPDATE");
                            S2();                                               //TOP PERCENT
                            INSERT1();                                          //Tabla donde se insertaran los datos
                            Coincidir("SET");
                            UPDATE1();
                            Output();
                            if ("FROM".equals(Preanalisis)) {
                                Coincidir("FROM");
                                F1();                           //METODO FROM

                                if (Contador < Palabras.length) {
                                    switch(Preanalisis){
                                        case "INNER":
                                            CoincidirTipo("RESERVADAS");            //INNER
                                            J1();                                   //RESTO DEL JOIN
                                            break;
                                        case "LEFT":case "RIGHT":case "FULL":
                                            CoincidirTipo("RESERVADAS");            //LEFT|RIGHT|FULL

                                            if ("OUTER".equals(Preanalisis)){       //OUTER
                                               Coincidir("OUTER");                              
                                            }
                                            J1();                                   //Resto del JOIN
                                            break;
                                        case "JOIN":
                                            J1();
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }
                            if ("WHERE".equals(Preanalisis)) {
                                Coincidir("WHERE");                     //WHERE
                                W();                                    //METODO
                            }
                            break;
                        case "DELETE":
                            Coincidir("DELETE");
                            S2();      

                            if ("OUTPUT".equals(Preanalisis)) {
                                Output();
                            }
                            if ("FROM".equals(Preanalisis)) {
                                Coincidir("FROM");
                                F1();                           //METODO FROM

                                if (Contador < Palabras.length) {
                                    switch(Preanalisis){
                                        case "INNER":
                                            CoincidirTipo("RESERVADAS");            //INNER
                                            J1();                                   //RESTO DEL JOIN
                                            break;
                                        case "LEFT":case "RIGHT":case "FULL":
                                            CoincidirTipo("RESERVADAS");            //LEFT|RIGHT|FULL

                                            if ("OUTER".equals(Preanalisis)){       //OUTER
                                               Coincidir("OUTER");                              
                                            }
                                            J1();                                   //Resto del JOIN
                                            break;
                                        case "JOIN":
                                            J1();
                                            break;
                                        default:
                                            break;
                                    }
                                }
                            }
                            if ("WHERE".equals(Preanalisis)) {
                                Coincidir("WHERE");                     //WHERE
                                W();                                    //METODO
                            }
                            break;
                        case "CREATE":
                            Coincidir("CREATE");                     //CREATE
                            switch(Preanalisis){
                                case "TABLE":
                                    Coincidir("TABLE");
                                    INSERT1();
                                    Coincidir("(");
                                    CreateTable1();

                                    break;
                                default:break;
                            }
                            break;
                        case "DECLARE":
                            Queue<String> stack = new LinkedList();
                            Coincidir("DECLARE");
                            stack.add(Preanalisis);
                            CoincidirTipo("VARIABLE");
                            if ("AS".equals(Preanalisis)) {
                                Coincidir("AS");
                            }
                            if (",".equals(Preanalisis)) {
                                do{
                                    Coincidir(",");
                                    stack.add(Preanalisis);
                                    if ("AS".equals(Preanalisis)) {
                                        Coincidir("AS");
                                    }
                                    CoincidirTipo("VARIABLE");
                                }while(",".equals(Preanalisis));
                            }
                            
                            if ("DATATYPE".equals(TipoToken)) {
                                if (stack.isEmpty()) {
                                    Reportar("No se ha declarado ninguna variable");
                                }
                                else{
                                    while(!stack.isEmpty()){
                                        TS.put(stack.remove(), new Valor(Preanalisis));
                                    }
                                    CoincidirTipo("DATATYPE");
                                }
                            }
                            break;
                        case "SET":
                            Coincidir("SET");
                            Valor auxili = (Valor) TS.get(Preanalisis);
                            switch(auxili.getTipo()){
                                case "INT":
                                    SetInt(Preanalisis, auxili);
                                    break;
                                case "FLOAT":
                                    SetFloat(Preanalisis, auxili);
                                    break;
                                default:
                                    Reportar("Se esperaba una variable." + Preanalisis);
                                    break;
                            }
                            break;
                        default://Error de palabra de incio - pasaremos a la siguiente palabra?
                            break;  
                    }
                }catch(NullPointerException E){ }
            }
            
            if (errores == 0) {
                //txtRespuesta.setText("");
                JOptionPane.showMessageDialog(null, "No se ha encontrado ningun error");
            }
            else{
                //Sino llenamos de informacion el txtRespuesta
                txtRespuesta.setText(TokenError);
            }
        }
    }//GEN-LAST:event_btnCargarSQLActionPerformed

    /**
     * SI existe AS coincidir y CoincidirAS
     */
    private void AS1(){
        if ("AS".equals(Preanalisis)) {
            Coincidir("AS");
            CoincidirAS();
        }
    }
    
    /**
     * EXPRESSIONES
     */
    private void Expresiones(){
        switch(TipoToken){
            case "IDENTIFICADOR":
                CoincidirTipo("IDENTIFICADOR");                 //Posible columna
                ID2();                                          //En caso de que lo anterior sea Tabla
                W4();
                break;
            case "CADENA":
                CoincidirTipo("CADENA");
                W4();
                break;
            case "ENTERO":
                CoincidirTipo("ENTERO");
                W4();
                break;
            case "DECIMAL":
                CoincidirTipo("DECIMAL");
                W4();
                break;
            case "FLOAT":
                CoincidirTipo("FLOAT");
                W4();
                break;
            case "CARACTERES":
                switch(Preanalisis){
                    case "(":
                        Coincidir("(");
                        Expresiones();
                        Coincidir(")");
                        break;
                    default:
                        Reportar(Preanalisis);
                        break;
                }
                break;
            case "RESERVADAS":
                switch(Preanalisis){
                    case "SUM":case "MAX":case "MIN": case"YEAR":case"MONTH":case"DAY":
                        CoincidirTipo("RESERVADAS");
                        Coincidir("(");
                        S1();                                           //ALL | DISTINCT
                        Expresiones();
                        Coincidir(")");
                        break;
                    case "COUNT":
                        CoincidirTipo("RESERVADAS");
                        Coincidir("(");
                        
                        if ("*".equals(Preanalisis)) {
                            Coincidir("*");
                            Coincidir(")");
                        } else{
                            S1();                                    //ALL | DISTINCT
                            Expresiones();                                    //EXPRESIONES
                            Coincidir(")");
                        }
                        break;
                        case"GETDATE":
                            CoincidirTipo("RESERVADAS");
                            Coincidir("(");
                            Coincidir(")");
                            break;
                    default:
                        break;
                }
                break;
            default:
                Reportar(Preanalisis);
                break;
        }
    }
    
    /**
     * METODO FROM 
     * validamos unicamente ID ID| ID.ID
     */
    private void F1(){
        CoincidirTipo("IDENTIFICADOR");                     //Consumimos el primer token-> ID
        switch(TipoToken){
            case "IDENTIFICADOR":
                CoincidirTipo("IDENTIFICADOR");             //ALIAS ID ID
                break;
            case "CARACTERES":
                if (".".equals(Preanalisis)) {
                    Coincidir(".");
                    CoincidirTipo("IDENTIFICADOR");         //Lo anterior era database o table ID.ID
                    F2();                                   //En caso que tenga algun otro schema o tenga alias
                }
                break;
            case "RESERVADAS": 
                if("AS".equals(Preanalisis)){ 
                    Coincidir("AS"); 
                    CoincidirTipo("IDENTIFICADOR");
                } else {
                    Reportar(Preanalisis);
                } 
                break;
            default:                                        //NO HACER NADA! Ya que no es necesario que se consuma 
                break;
        }
    }
    
    /**
     * ID.ID ->.ID
     * ID.ID ->ID
     */
    private void F2(){
        if ("IDENTIFICADOR".equals(TipoToken)) {
            CoincidirTipo("IDENTIFICADOR");                 //Este sería el ALIAS de la tabla
        }
        else if ("AS".equals(Preanalisis)) {
            Coincidir("AS");
            CoincidirTipo("IDENTIFICADOR");
        }
        else if (".".equals(Preanalisis)) {
            Coincidir(".");
            CoincidirTipo("IDENTIFICADOR");                 //Esta seria la columna de la tabla
            
            switch(TipoToken){                              //ALIAS
                case "IDENTIFICADOR":
                    CoincidirTipo("IDENTIFICADOR");         
                    break;
                case "RESERVADAS":
                    if ("AS".equals(Preanalisis)) {
                        Coincidir("AS");
                        CoincidirTipo("IDENTIFICADOR");
                    }
                    break;
                default:                                    //Esta seccion podría o no venir
                    break;
            }
        }
    }
    
    /**
     * METODO GROUP BY
     */
    private void G(){
        Expresiones();
        if (",".equals(Preanalisis)) {
            Coincidir(",");
            G();
        }
    }
    
    private void H(){
        W();
    }
    
    /**
     * .ID | .*
     */
    private void ID1(){                                         //Cuando suponemos que algo acompaña al table
        if (".".equals(Preanalisis)) {
            Coincidir(".");
            switch(TipoToken){                                  //Puede venir ID, *, $IDENTITY
                case "IDENTIFICADOR":
                    CoincidirTipo("IDENTIFICADOR");
                    break;
                    case "CARACTERES":
                        if ("*".equals(Preanalisis)) 
                            Coincidir("*");
                        else
                            Reportar(Preanalisis);
                    break;
                default:
                    Reportar(Preanalisis);
                    break;
            }
        }
    }
    
    /***
     * SI existe punto e identificador
     */
    private void ID2(){
        if (".".equals(Preanalisis)) {
            Coincidir(".");
            CoincidirTipo("IDENTIFICADOR");
        }
    }
    
    /**
     * Tablas del INSERT ID.ID.ID | ID.ID | ID
     */
    private void INSERT1(){
        CoincidirTipo("IDENTIFICADOR");                 //ID
        if (".".equals(Preanalisis)) {
            Coincidir(".");
            CoincidirTipo("IDENTIFICADOR");             //ID.ID
            
            if (".".equals(Preanalisis)) {
                Coincidir(".");
                CoincidirTipo("IDENTIFICADOR");         //ID.ID.ID
            }
        }
    }
    
    private void INSERT2(){
        CoincidirTipo("IDENTIFICADOR");
        if (",".equals(Preanalisis)) {
            Coincidir(",");
            INSERT2();
        }
    }
    
    /**
     * Metodo para consumir desde JOIN hasta la ultima columna relacionada
     */
    private void J1(){
        Coincidir("JOIN");                      //JOIN
        CoincidirTipo("IDENTIFICADOR");         //Tabla o database name
        J2();                                   //Resto de la tabla
        Coincidir("ON");                        //ON
        CoincidirTipo("IDENTIFICADOR");         //Tabla o database name
        J2();                                   //Resto de la tabla
        Coincidir("=");                         // =
        CoincidirTipo("IDENTIFICADOR");         //Tabla o database name
        J2();                                   //Resto de la tabla
        
        switch(Preanalisis){
            case "INNER":
                CoincidirTipo("RESERVADAS");            //INNER
                J1();                                   //RESTO DEL JOIN
                break;
            case "LEFT":case "RIGHT":case "FULL":
                CoincidirTipo("RESERVADAS");            //LEFT|RIGHT|FULL
                
                if ("OUTER".equals(Preanalisis)){         //OUTER
                    Coincidir("OUTER");                              
                }
                
                J1();                                   //Resto del JOIN
                break;
            case "JOIN":
                J1();
                break;
            default:
                break;
        }
    }
    
    /**
     * Metodo para analizar si se obtiene alias o columna
     */
    private void J2(){
        if (".".equals(Preanalisis)) {
            Coincidir(".");
            CoincidirTipo("IDENTIFICADOR");
            
            if ("IDENTIFICADOR".equals(TipoToken)) 
                CoincidirTipo("IDENTIFICADOR");
        }
    }
    
    
    private void O(){
        G();
        if ("ASC".equals(Preanalisis)) {
            Coincidir("ASC");
        }
        else if ("DESC".equals(Preanalisis)) {
            Coincidir("DESC");
        }
    }
    /**
     * METODO DE OUTPUT
     */
    private void Output(){
        Coincidir("OUTPUT");
        Output1();
        
        if ("INTO".equals(Preanalisis)) {
            Coincidir("INTO");
            
            if("@".equals(Preanalisis)){
                Coincidir("@");
            }
            CoincidirTipo("IDENTIFICADOR");
            
            if ("(".equals(Preanalisis)) {
                Coincidir("(");
                INSERT2();                      //Listado de columnas
                Coincidir(")");
            }
            
        }
    }
    /**
     * DELETED | INSERTED | ID '.' * | ID [AS ID | Cadena] ,
     */
    private void Output1(){
        if ("DELETED".equals(Preanalisis) || "INSERTED".equals(Preanalisis) || "IDENTIFICADOR".equals(TipoToken)) {
            CoincidirTipo("IDENTIFICADOR");
            Coincidir(".");
            
            if ("*".equals(Preanalisis)) {
                Coincidir("*");
            } else if ("IDENTIFICADOR".equals(TipoToken)) {
                CoincidirTipo("IDENTIFICADOR");
            } else{
                Reportar(Preanalisis);
            }
            
            if (",".equals(Preanalisis)) {
                Coincidir(",");
                Output1();
            }
        } else{
            Reportar(Preanalisis);
        }
    }
    

    /**
     * ALL || DISTINCT
     */
    private void S1(){
        if ("ALL".equals(Preanalisis)) 
            Coincidir("ALL");
        
        if ("DISTINCT".equals(Preanalisis)) 
            Coincidir("DISTINCT");
    }
    
    /**
     * TOP X PERCENT  
     */
    private void S2(){
        if ("TOP".equals(Preanalisis)) {
            Coincidir("TOP");
            CoincidirNum();
            if ("PERCENT".equals(Preanalisis)) {
                Coincidir("PERCENT");
            }
        }
    }
    
    /**
     * Expresiones que vienen en select
     */
    private void S3(){                                          //Tipo de expresion que viene en select
        switch(TipoToken){                                      
            case "CARACTERES":                                  
                switch(Preanalisis){
                    case "*":                                   //Cuando se trata unicamente de un *
                        Coincidir("*");
                        CoincidirComa();                        //Ver si le sigue una coma
                        break;
                    default:
                        Reportar(Preanalisis);
                        break;
                }
                break;
            case "RESERVADAS":
                Expresiones();
                AS1();                                          //Puede venir o no un AS ...
                CoincidirComa();                                //Puede venir una coma ,
                break;
            case "IDENTIFICADOR":
                CoincidirTipo("IDENTIFICADOR");
                ID1();                                          //Puede que el identificador de arriba no sea una columna, sino una tabla, una view o alias
                AS1();                                          //Puede venir o no un AS ...
                CoincidirComa();                                //Puede venir una coma ,
                break;
            default:
                Reportar(Preanalisis);
                break;
        }
    }
    private void SetFloat(String preanalis, Valor value){
        List <String> lista = Postfijo();
        Stack<Double> listaFinal = new Stack<>();
        for (String var : lista){
            switch(var){
                case "+":
                    double v1 = listaFinal.pop();
                    double v2 = listaFinal.pop();
                    listaFinal.push(v1+v2);
                    break;
                case "-":
                    v1 = listaFinal.pop();
                    v2 = listaFinal.pop();
                    listaFinal.push(v1-v2);
                    break;
                case "*":
                    v1 = listaFinal.pop();
                    v2 = listaFinal.pop();
                    listaFinal.push(v1*v2);
                    break;
                case "/":
                    v1 = listaFinal.pop();
                    v2 = listaFinal.pop();
                    listaFinal.push(v1/v2);
                    break;
                default:
                    double valor11 = Double.valueOf(var);
                    listaFinal.add(valor11);
                    break;
            }
        }
        TS.remove(preanalis);
        Valor nuevoValor = new Valor(value.getTipo());
        nuevoValor.setValor(listaFinal.pop());
        TS.put(preanalis, nuevoValor);
    }
    private void SetInt(String preanalis, Valor value){
        List <String> lista = Postfijo();
        Stack<Integer> listaFinal = new Stack<>();
        for (String var : lista){
            switch(var){
                case "+":
                    int v1 = listaFinal.pop();
                    int v2 = listaFinal.pop();
                    listaFinal.push(v1+v2);
                    break;
                case "-":
                    v1 = listaFinal.pop();
                    v2 = listaFinal.pop();
                    listaFinal.push(v1-v2);
                    break;
                case "*":
                    v1 = listaFinal.pop();
                    v2 = listaFinal.pop();
                    listaFinal.push(v1*v2);
                    break;
                case "/":
                    v1 = listaFinal.pop();
                    v2 = listaFinal.pop();
                    listaFinal.push(v1/v2);
                    break;
                default:
                    if (var.contains(".")) {
                        double valor11 = Double.valueOf(var);
                        listaFinal.add((int) valor11);
                    }else
                        listaFinal.add(Integer.valueOf(var));
                    break;
            }
        }
        //Tendremos que remover la variable y volverla a guardar con los nuevos datos.
        
        TS.remove(preanalis);
        Valor nuevoValor = new Valor(value.getTipo());
        nuevoValor.setValor(listaFinal.pop());
        TS.put(preanalis, nuevoValor);
    }
    
    public List<String> Postfijo(){
        List<String> lista = new ArrayList<>();
        Stack<String> cola = new Stack<>();
        
        CoincidirTipo("VARIABLE");
        Coincidir("=");
        while(haySiguiente()){
            switch(TipoToken){
                case "DECIMAL":
                    lista.add(Preanalisis);
                    CoincidirTipo("DECIMAL");
                    break;
                case "ENTERO":
                    lista.add(Preanalisis);
                    CoincidirTipo("ENTERO");
                    break;
                case "VARIABLE": //Debería ir a traer el valor de la variable
                    Valor auxiliar1 = (Valor) TS.get(Preanalisis);
                    lista.add(auxiliar1.getValor().toString());
                    CoincidirTipo("VARIABLE");
                    break;
                case "CARACTERES":
                    switch(Preanalisis){
                        case "(":
                            cola.push(Preanalisis);
                            Coincidir("(");
                            break;
                        case ")":
                            while(!cola.empty() && cola.peek() != "("){
                                lista.add(cola.pop());
                            }
                            if (cola.isEmpty()) 
                                Reportar("Hace falta un parentesis izquierdo");
                            else{
                                cola.pop();
                                Coincidir(")");
                            }
                            break;
                        case "+":case"-":
                            while(!cola.empty() &&  (cola.peek() == "+" || cola.peek() == "-" || cola.peek() == "/" || cola.peek() == "*")){
                                lista.add(cola.pop());
                            }
                            cola.push(Preanalisis);
                            CoincidirTipo("CARACTERES");
                            break;
                        case "/":case "*":
                            while(cola.peek() == "/" || cola.peek() == "*"){
                                lista.add(cola.pop());
                            }
                            cola.push(Preanalisis);
                            CoincidirTipo("CARACTERES");
                            break;
                        default:
                            break;
                    }
                    break;
                default:
                    break;
            }
        }
        while(!cola.empty()){
            lista.add(cola.pop());
        }
        return lista;
    }
    
    /**
     * Metodo para devolver ID, DATATYPE
     */
    private void CreateTable1(){
        CoincidirTipo("IDENTIFICADOR");

        switch(Preanalisis){
            case"CHAR":case"BINARY":case"BLOP":case"BIT":case"SMALLINT":case"INT":case"INTEGER":case"FLOAT":case"VARCHAR":
            case"NVARCHAR":case"NCHAR":
                CoincidirTipo("RESERVADAS");
                if ("(".equals(Preanalisis)) {
                    Coincidir("(");
                    if ("ENTERO".equals(TipoToken)) {
                        CoincidirTipo("ENTERO");

                    } else if ("MAX".equals(Preanalisis) || "MIN".equals(Preanalisis)) {
                        CoincidirTipo("RESERVADAS");
                    } else{
                        Reportar(Preanalisis);
                    }
                    Coincidir(")");
                }

                //Coincidir
                break;
                case"BOOLEAN":case"DATE":case"BLOB":case"YEAR":case"IMAGE":case"REAL":case"TIME":case"TIMESTAMP":
                case"CURSOR":case"TABLE":case"TEXT":case"BYTE":case"LONG":case"DOUBLE":
                    CoincidirTipo("RESERVADAS");
                    break;
                default:
                    Reportar(Preanalisis);
                    break;
        }
    }
    
    private void UPDATE1(){
        CoincidirTipo("IDENTIFICADOR");
        Coincidir("=");
        if ("DEFAULT".equals(Preanalisis) || "NULL".equals(Preanalisis)) {
            CoincidirTipo("RESERVADAS");
        }else{
            Expresiones();                                                   //EXPRESIONES
        }
        
        if (",".equals(Preanalisis)) {
            Coincidir(",");
            UPDATE1();
        }
        
    }
    
    /**
     * METODO WHERE
     */
    private void W(){
        if ("NOT".equals(Preanalisis))                             //Coincidir NOT
            Coincidir("NOT");
        
        switch(TipoToken){
            case "RESERVADAS":
                switch(Preanalisis){
                    case "CONTAINS":case"FREETEXT":
                        CoincidirTipo("RESERVADAS");
                        Coincidir("(");
                        CoincidirTipo("IDENTIFICADOR");
                        ID1();
                        Coincidir(",");
                        CoincidirTipo("CADENA");
                        Coincidir(")");
                        W2();
                        break;
                    case "SUM":case "MAX":case "MIN":
                        CoincidirTipo("RESERVADAS");
                        Coincidir("(");
                        S1();                                       //ALL|DISTINCT
                        Expresiones();                                       //Expression
                        Coincidir(")");
                        break;
                    case "COUNT":
                        CoincidirTipo("RESERVADAS");
                        Coincidir("(");
                        
                        if ("*".equals(Preanalisis)) {
                            Coincidir("*");
                            Coincidir(")");
                        } else{
                            S1();
                            Expresiones();
                            Coincidir(")");
                        }
                        break;
                    default:
                        Reportar(Preanalisis);
                        break;
                }
                break;
            case "IDENTIFICADOR":case "CADENA": case "ENTERO":case "DECIMAL":case "FLOAT":case "CARACTERES":
                Expresiones();
                break;
            default:
                break;
        }
        W5();
    }
    
    
    /**
     * AND | OR NOT
     */
    private void W2(){
        if ("AND".equals(Preanalisis) || "OR".equals(Preanalisis)) {
            CoincidirTipo("RESERVADAS");
            W();
        }
    }
    /**
     * ID | ID.ID | *
     */
    private void W3(){
        switch(TipoToken){
            case "CARACTERES":
                if("*".equals(Preanalisis))
                    Coincidir("*");
                else
                    Reportar(Preanalisis);
                break;
            case "IDENTIFICADOR":
                CoincidirTipo("IDENTIFICADOR");                 //Posible columna
                ID2();                                          //En caso de que lo anterior sea Tabla
                break;
            default:
                Reportar(Preanalisis);
                break;
        }
    }
    
    /**
     * SIGNOS
     */
    private void W4(){
        switch(Preanalisis){
            case "+":case "-":case "*":case "/":case "%":
                CoincidirTipo("CARACTERES");
                Expresiones();
                break;
            default:
                break;
        }
    }
    
    /**
     * PREDICATES
     */
    private void W5(){
        switch(Preanalisis){
            case"=":case"!=":case">":case">=":case"<":case"<=":
                CoincidirTipo("CARACTERES");
                Expresiones();
                break;
            case "NOT":
                Coincidir("NOT");
                if ("LIKE".equals(Preanalisis)) {
                    Coincidir("LIKE");
                    CoincidirTipo("CADENA");
                    if ("ESCAPE".equals(Preanalisis)) {
                        Coincidir("ESCAPE");
                        CoincidirTipo("CADENA");
                    }
                }
                else if ("BETWEEN".equals(Preanalisis)) {
                    Coincidir("BETWEEN");
                    Expresiones();
                    Coincidir("AND");
                    Expresiones();
                }
                else{
                    Reportar(Preanalisis);
                }
                break;
            case "IS":
                Coincidir("IS");
                
                if ("NOT".equals(Preanalisis)) {
                    Coincidir("NOT");
                }
                
                Coincidir("NULL");
                break;
            case "LIKE":
                Coincidir("LIKE");
                CoincidirTipo("CADENA");
                if ("ESCAPE".equals(Preanalisis)) {
                    Coincidir("ESCAPE");
                    CoincidirTipo("CADENA");
                }
                break;
            case "BETWEEN":
                Coincidir("BETWEEN");
                Expresiones();
                Coincidir("AND");
                Expresiones();
                break;
            default:
                break;
        }
        
        if ("AND".equals(Preanalisis) || "OR".equals(Preanalisis))  {
            CoincidirTipo("RESERVADAS");
            W();
        }
    }
    private void Coincidir(String token){
        if (!Preanalisis.equals(token)) {
            Reportar(Preanalisis);   
        }
        else{
            Contador++;
            
            if (Contador < Palabras.length){
                String[] aux = Palabras[Contador].split(" JMP ");
                Preanalisis = aux[0];
                TipoToken = aux[1];   
            }
        }
    }
    
    private boolean haySiguiente(){
        return Contador < Palabras.length;
    }
    
    private void CoincidirAS(){
        if("CADENA".equals(TipoToken))
            CoincidirTipo("CADENA");
        else if("IDENTIFICADOR".equals(TipoToken))
            CoincidirTipo("IDENTIFICADOR");
        else
            Reportar(Preanalisis);
    }
    
    private void CoincidirTipo(String token){
        if (!TipoToken.equals(token)) {
            Reportar(Preanalisis);   
        }
        else{
            Contador++;
            
            if (Contador < Palabras.length){
                String[] aux = Palabras[Contador].split(" JMP ");
                Preanalisis = aux[0];
                TipoToken = aux[1];   
            }
        }
    }
    
    private void CoincidirNum(){
        switch(TipoToken){
            case "ENTERO":
                CoincidirTipo("ENTERO");
                break;
            case "DECIMAL":
                CoincidirTipo("DECIMAL");
                break;
            case "FLOAT":
                CoincidirTipo("FLOAT");
                break;
            default:
                Reportar(Preanalisis);
                break;
        }
    }
    
    private void CoincidirComa(){
        if (",".equals(Preanalisis)) {
            Coincidir(",");
            S3();
        }
    }
    

     private void Reportar(String text){ //PENDIENTE
        try{
            throw new NullPointerException("demo"); 
        }catch(NullPointerException e){
            errores++;
            TokenError += text + "\n";
            throw e;
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(minisql.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(minisql.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(minisql.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(minisql.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new minisql().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarSQL;
    private javax.swing.JButton btnLoadFlex;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtRespuesta;
    // End of variables declaration//GEN-END:variables
}
