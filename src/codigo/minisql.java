/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package codigo;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author lam_m
 */
public class minisql extends javax.swing.JFrame {

    /**
     * Creates new form minisql
     */
    public minisql() {
        initComponents();
        this.setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnLoadFlex = new javax.swing.JButton();
        btnCargarSQL = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtRespuesta = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnLoadFlex.setText("Cargar Jflex");
        btnLoadFlex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadFlexActionPerformed(evt);
            }
        });

        btnCargarSQL.setText("Cargar SQL");
        btnCargarSQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCargarSQLActionPerformed(evt);
            }
        });

        txtRespuesta.setColumns(20);
        txtRespuesta.setRows(5);
        jScrollPane1.setViewportView(txtRespuesta);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLoadFlex)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 666, Short.MAX_VALUE)
                        .addComponent(btnCargarSQL)
                        .addGap(24, 24, 24))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadFlex)
                    .addComponent(btnCargarSQL))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadFlexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadFlexActionPerformed
        // TODO add your handling code here:
        JFileChooser dialogo = new JFileChooser();
        FileNameExtensionFilter filtro=new FileNameExtensionFilter("Archivo Flex","flex");
        dialogo.setFileFilter(filtro);
        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            File archivo = dialogo.getSelectedFile();
            JFlex.Main.generate(archivo);
        }
    }//GEN-LAST:event_btnLoadFlexActionPerformed

    
    private String Preanalisis = "";
    private String TipoToken = "";
    private String[] Palabras;
    private int Contador = 0;
    
    private void btnCargarSQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCargarSQLActionPerformed
        // TODO add your handling code here:
        
        File archivo;
        JFileChooser dialogo = new JFileChooser();
        String rutaArchivo = "";
        FileNameExtensionFilter filtro=new FileNameExtensionFilter("Archivo SQL","sql");
        dialogo.setFileFilter(filtro);
        int valor = dialogo.showOpenDialog(this);
        if (valor == JFileChooser.APPROVE_OPTION) {
            //Obtener la direccion del documento
            archivo = dialogo.getSelectedFile();
            rutaArchivo = archivo.getPath();
            String result = "";
            
            try {
                //Comenzar con la lectura del documento
                Reader lector = new BufferedReader(new FileReader(archivo));
                Lexer lexer = new Lexer(lector);
                while (true) {
                    Tokens tokens = lexer.yylex();
                    if (tokens == null) {
                        break;
                    }
                    
                    switch (tokens) {
                        case ERROR:
                            result += "ERROR JMP ERROR\n";
                            break;
                        case IdentificadorOver:
                            result += lexer.lexeme.substring(0, 31) + " JMP IDENTIFICADOR\n";
                            break;
                        default:
                            result += lexer.lexeme + " JMP " + tokens.toString().toUpperCase() + "\n";
                            break;
                    }
                }
                //File archivoOut = new File
            } catch (FileNotFoundException ex) {
                Logger.getLogger(minisql.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(minisql.class.getName()).log(Level.SEVERE, null, ex);
            }
            txtRespuesta.setText(result);
            
            boolean error = false;
            String[] sentencias = result.split("; JMP CARACTERES\\n");                  //Separacion de las 8 sentencias posibles mediante ';'
            for (String sentencia : sentencias) {
                //Recorremos las sentencias
                Palabras = sentencia.split("\\n"); //Separamos tokens o palabras reservadas
                String[] aux = Palabras[0].split(" JMP ");
                Preanalisis = aux[0];
                TipoToken = aux[1];
                switch(Preanalisis){
                    case "SELECT"://Cuando nos encontremos con un token de SELECT al inicio de una sentencia
                        Coincidir("SELECT");
                        S1();                               //ALL|DISTINCT
                        S2();                               //TOP
                        S3();                               //The columns to be selected for the result set
                        if (Contador < Palabras.length) {   //Puede que se de el caso de que el select solo tenga expresiones
                            Coincidir("FROM");
                            F1();                           //Consumir Identificador
                            
                            if (Contador < Palabras.length) {
                                switch(Preanalisis){
                                    case "INNER":
                                        CoincidirTipo("RESERVADAS");            //INNER
                                        J3();                                   //RESTO DEL JOIN
                                        break;
                                    case "LEFT":case "RIGHT":case "FULL":
                                        CoincidirTipo("RESERVADAS");            //LEFT|RIGHT|FULL
                                        J1();                                   //OUTER
                                        J3();                                   //Resto del JOIN
                                        break;
                                    case "JOIN":
                                        J3();
                                        break;
                                    case "WHERE":                               
                                        Coincidir("WHERE");                     //WHERE
                                        CoincidirTipo("IDENTIFICADOR");         //Columna o databse name
                                        J2();                                   //Columna o alias
                                        
                                    break;
                                    default:
                                        Reportar(Preanalisis);
                                        break;
                                }
                            }
                        }   
                        break;
                    default://Error de palabra de incio - pasaremos a la siguiente palabra?
                        break;  
                }
            }
            
            if (!error) {
                //txtRespuesta.setText("");
                JOptionPane.showMessageDialog(null, "No se ha encontrado ningun error");
            }
            else{
                //Sino llenamos de informacion el txtRespuesta
                
            }    
        }   
    }//GEN-LAST:event_btnCargarSQLActionPerformed

    private void AS1(){
        if ("AS".equals(Preanalisis)) {
            Coincidir("AS");
            CoincidirAS();
        }
    }
    
    private void F1(){
        CoincidirTipo("IDENTIFICADOR");
        switch(TipoToken){
            case "IDENTIFICADOR":
                CoincidirTipo("IDENTIFICADOR");
                break;
            case "CARACTERES":
                if (".".equals(Preanalisis)) {
                    Coincidir(".");
                    CoincidirTipo("IDENTIFICADOR");         //Esto sería el schema o la columna
                    F2();                                   //En caso que tenga algun otro schema o tenga alias
                }
                break;
            default://NO HACER NADA! Ya que no es necesario que se consuma 
                break;
        }
    }
    
    private void F2(){
        if ("IDENTIFICADOR".equals(TipoToken)) {
            CoincidirTipo("IDENTIFICADOR");                 //Este sería el ALIAS de la tabla
        }
        
        else if (".".equals(Preanalisis)) {
            Coincidir(".");
            CoincidirTipo("IDENTIFICADOR");                 //Esta seria la columna de la tabla
            
            switch(TipoToken){                              //ALIAS
                case "IDENTIFICADOR":
                    CoincidirTipo("IDENTIFICADOR");         
                    break;
                case "RESERVADAS":
                    if ("AS".equals(Preanalisis)) {
                        Coincidir("AS");
                        CoincidirTipo("IDENTIFICADOR");
                    }
                    break;
                default:                                    //Esta seccion podría o no venir
                    break;
            }
        }
    }
    
    
    private void ID1(){                                         //Cuando suponemos que algo acompaña al table
        if (".".equals(Preanalisis)) {
            
            Coincidir(".");
            
            switch(TipoToken){                                  //Puede venir ID, *, $IDENTITY
                case "IDENTIFICADOR":
                    CoincidirTipo("IDENTIFICADOR");
                    break;
                    case "CARACTERES":
                        if ("*".equals(Preanalisis)) {
                            Coincidir("*");
                        }
                        else if ("$".equals(Preanalisis)) {
                            Coincidir("$");
                            Coincidir("IDENTITY");
                        }
                        else{
                            Reportar(Preanalisis);
                        }
                    break;
                default:
                    Reportar(Preanalisis);
                    break;
            }
        }
    }
    
    private void J1(){
        if ("OUTER".equals(Preanalisis)) {
            Coincidir("OUTER");
        }
    }
    
    /**
     * Metodo para analizar si se obtiene alias o columna
     */
    private void J2(){
        if (".".equals(Preanalisis)) {
            Coincidir(".");
            CoincidirTipo("IDENTIFICADOR");
            
            if ("IDENTIFICADOR".equals(TipoToken)) 
                CoincidirTipo("IDENTIFICADOR");
        }
    }
    
    private void J3(){
        Coincidir("JOIN");                      //JOIN
        CoincidirTipo("IDENTIFICADOR");         //Tabla o database name
        J2();                                   //Resto de la tabla
        Coincidir("ON");                        //ON
        CoincidirTipo("IDENTIFICADOR");         //Tabla o database name
        J2();                                   //Resto de la tabla
        Coincidir("=");                         // =
        CoincidirTipo("IDENTIFICADOR");         //Tabla o database name
        J2();                                   //Resto de la tabla
        
        switch(Preanalisis){
            case "INNER":
                CoincidirTipo("RESERVADAS");            //INNER
                J3();                                   //RESTO DEL JOIN
                break;
            case "LEFT":case "RIGHT":case "FULL":
                CoincidirTipo("RESERVADAS");            //LEFT|RIGHT|FULL
                J1();                                   //OUTER
                J3();                                   //Resto del JOIN
                break;
            case "JOIN":
                J3();
                break;
            default:
                break;
        }
    }
    
    private void S1(){
        if ("ALL".equals(Preanalisis)) 
            Coincidir("ALL");
        
        if ("DISTINCT".equals(Preanalisis)) 
            Coincidir("DISTINCT");
    }
    
    private void S2(){
        if ("TOP".equals(Preanalisis)) {
            Coincidir("TOP");
            CoincidirNum();
            if ("PERCENT".equals(Preanalisis)) {
                Coincidir("PERCENT");
            }
        }
        else if ("PERCENT".equals(Preanalisis) || "ALL".equals(Preanalisis) || "DISTINCT".equals(Preanalisis)) {
            Reportar(Preanalisis);
        }
    }
    
    private void S3(){                                          //Tipo de expresion que viene en select
        switch(TipoToken){                                      
            case "CARACTERES":                                  
                switch(Preanalisis){
                    case "*":                                   //Cuando se trata unicamente de un *
                        Coincidir("*");
                        CoincidirComa();                        //Ver si le sigue una coma
                        break;
                    default:
                        Reportar(Preanalisis);
                        break;
                }
                break;
            case "RESERVADAS":
                switch(Preanalisis){
                    case "COUNT":
                        Coincidir("COUNT");
                        Coincidir("(");
                                                                //COMING SOON JEJEJE
                        break;
                    default:
                        Reportar(Preanalisis);
                        break;
                }
                break;
            case "IDENTIFICADOR":
                CoincidirTipo("IDENTIFICADOR");
                ID1();                                          //Puede que el identificador de arriba no sea una columna, sino una tabla, una view o alias
                AS1();                                          //Puede venir o no un AS ...
                CoincidirComa();                                //Puede venir una coma ,
                break;
            default:
                Reportar(Preanalisis);
                break;
        }
    }
    
    private void Coincidir(String token){
        if (!Preanalisis.equals(token)) {
            Reportar(Preanalisis);   
        }
        else{
            Contador++;
            
            if (Contador < Palabras.length){
                String[] aux = Palabras[Contador].split(" JMP ");
                Preanalisis = aux[0];
                TipoToken = aux[1];   
            }
        }
    }
    
    private void CoincidirAS(){
        if("CADENA".equals(TipoToken))
            CoincidirTipo("CADENA");
        
        else if("IDENTIFICADOR".equals(TipoToken))
            CoincidirTipo("IDENTIFICADOR");
        
        else
            Reportar(Preanalisis);
    }
    
    private void CoincidirTipo(String token){
        if (!TipoToken.equals(token)) {
            Reportar(Preanalisis);   
        }
        else{
            Contador++;
            
            if (Contador < Palabras.length){
                String[] aux = Palabras[Contador].split(" JMP ");
                Preanalisis = aux[0];
                TipoToken = aux[1];   
            }
        }
    }
    
    private void CoincidirNum(){
        switch(TipoToken){
            case "ENTERO":
                CoincidirTipo("ENTERO");
                break;
            case "DECIMAL":
                CoincidirTipo("DECIMAL");
                break;
            case "FLOAT":
                CoincidirTipo("FLOAT");
                break;
            default:
                Reportar(Preanalisis);
                break;
        }
    }
    
    private void CoincidirComa(){
        if (",".equals(Preanalisis)) {
            Coincidir(",");
            S3();
        }
    }
    
     private void Reportar(String text){ //PENDIENTE
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(minisql.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(minisql.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(minisql.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(minisql.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new minisql().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCargarSQL;
    private javax.swing.JButton btnLoadFlex;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtRespuesta;
    // End of variables declaration//GEN-END:variables
}
